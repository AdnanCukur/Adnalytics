{"version":3,"file":"adnalytics.es5.js","sources":["../src/app/Settings.ts","../src/app/AdnalyticsObserver.ts","../src/app/AdnalyticsStore.ts","../src/app/Init.ts"],"sourcesContent":["export class Settings {\r\n  public static profile: string\r\n  public static onEventAttrName: string\r\n  public static callback: Function\r\n}\r\n","import { Init } from \"../Adnalytics\";\nimport { Settings } from \"./Settings\";\n\n/**\n * Observes DOM changes to be able to catch if a new element gets added to the dom that should attach event listeners.\n * SPA's and lazy loaded content won't work without this.\n * Doesnt work for IE <= 10\n */\nexport class AdnalyticsObserver {\n  public static register() {\n    // check if browser supports mutation observer, if not return.\n    if (!(\"MutationObserver\" in window)) {\n      return;\n    }\n\n    let observer: MutationObserver = new MutationObserver(mutations => {\n      mutations.forEach((mutation: MutationRecord): void => {\n        AdnalyticsObserver.handleDomMutation(mutation);\n      });\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: false,\n      characterData: false\n    });\n  }\n  private static handleDomMutation(mutation: any): void {\n    if (!mutation.addedNodes) {\n      return;\n    }\n\n    for (let i: number = 0; i < mutation.addedNodes.length; i++) {\n      let node: HTMLElement = mutation.addedNodes[i] as HTMLElement;\n      if (node == null || node.id == null || node.className == null) {\n        return;\n      }\n\n      AdnalyticsObserver.handleAddedDomElement(node);\n    }\n  }\n\n  private static handleAddedDomElement(element: HTMLElement): void {\n    // check if added dom element is an adnalytics element and if it is attach listeners to it\n    if (AdnalyticsObserver.elementIsAdnalyticsElement(element)) {\n      Init.attachListeners(element);\n    }\n\n    // check if added dom element contains adnalytics elements and if it does\n    // attach listeners to every one of those elements\n    let adnalyticsElementsInside: NodeListOf<\n      Element\n    > = AdnalyticsObserver.elementContainsAdnalyticsElements(element);\n    if (adnalyticsElementsInside.length > 0) {\n      for (let i: number = 0; i < adnalyticsElementsInside.length; i++) {\n        let node: HTMLElement = adnalyticsElementsInside.item(i) as HTMLElement;\n        Init.attachListeners(node);\n      }\n    }\n  }\n\n  private static elementIsAdnalyticsElement(element: HTMLElement): boolean {\n    let classnames: string[] = element.className.split(\" \");\n    for (let i: number = 0; i < classnames.length; i++) {\n      if (classnames[i].indexOf(Settings.profile) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n  private static elementContainsAdnalyticsElements(\n    element: HTMLElement\n  ): NodeListOf<Element> {\n    return element.getElementsByClassName(Settings.profile);\n  }\n}\n","/**\n * Makes sure we don't get duplicate event listeners on the same dom element\n */\nexport class AdnalyticsStore {\n  public static store: any = {}\n  private static count: number = 0\n  public static add(element: any): void {\n    element.__data = AdnalyticsStore.count++\n    AdnalyticsStore.store[element.__data] = 1\n  }\n  public static exists(element: any): boolean {\n    if (AdnalyticsStore.store[element.__data] != null) {\n      return true\n    }\n    return false\n  }\n}\n","import { AdnalyticsObserver } from \"./AdnalyticsObserver\";\nimport { AdnalyticsStore } from \"./AdnalyticsStore\";\nimport { Settings } from \"./Settings\";\n\n/** registers the observer which observers changes made to the dom\n *  initiates the initial scan of elements\n */\nexport class Init {\n  constructor(options: AdnalyticsOptions) {\n    Init.setSettings(options);\n    AdnalyticsObserver.register();\n    Init.scan();\n  }\n  public static setSettings(options: AdnalyticsOptions) {\n    Settings.profile = options.profile;\n    Settings.onEventAttrName = options.profile + \"-on\";\n    Settings.callback = options.callback;\n  }\n\n  /**\n   * Scans the dom for the profile class and attaches a listener to the elements\n   */\n  public static scan(): void {\n    let allAdnalyticsElements: HTMLCollectionOf<\n      Element\n    > = document.getElementsByClassName(Settings.profile);\n    for (let i = 0; i < allAdnalyticsElements.length; i++) {\n      let node: HTMLElement = allAdnalyticsElements.item(i) as HTMLElement;\n      Init.attachListeners(node);\n    }\n  }\n  /**\n   * Attaches a listener to the element which then calls the callback method\n   * when triggered with the belonging profile attributes as an object\n   * ex: <p class='myprofile' myprofile-on='click' myprofile-name='peter' myprofile-id='4'>text..</p>\n   *     will trigger the callback function when the element is clicked on with an object {name:\"peter\", id:\"4\"}\n   * @param node element with the profile class\n   */\n  public static attachListeners(node: HTMLElement): void {\n    if (AdnalyticsStore.exists(node)) {\n      return;\n    }\n    AdnalyticsStore.add(node);\n    let attributes: NamedNodeMap = node.attributes;\n    let onEvent: Attr = attributes.getNamedItem(Settings.onEventAttrName);\n    let analyticsObject: any = {};\n    for (let i: number = 0; i < attributes.length; i++) {\n      let attributeName: string = attributes[i].name;\n      let attributeValue: string = attributes[i].value;\n      if (\n        attributeName.indexOf(Settings.profile) === 0 &&\n        attributeName !== Settings.onEventAttrName\n      ) {\n        analyticsObject[\n          attributeName.replace(Settings.profile + \"-\", \"\")\n        ] = attributeValue;\n      }\n    }\n    if (onEvent.value === \"load\") {\n      Settings.callback(analyticsObject);\n    } else {\n      node.addEventListener(onEvent.value, (e: Event) => {\n        Settings.callback(analyticsObject);\n      });\n    }\n  }\n}\nexport class AdnalyticsOptions {\n  profile: string;\n  callback: Function;\n}\n"],"names":[],"mappings":"AAAA;IAAA;KAIC;IAAD,eAAC;CAAA;;ACDD;;;;;AAKA;IAAA;KAoEC;IAnEe,2BAAQ,GAAtB;;QAEE,IAAI,EAAE,kBAAkB,IAAI,MAAM,CAAC,EAAE;YACnC,OAAO;SACR;QAED,IAAI,QAAQ,GAAqB,IAAI,gBAAgB,CAAC,UAAA,SAAS;YAC7D,SAAS,CAAC,OAAO,CAAC,UAAC,QAAwB;gBACzC,kBAAkB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;aAChD,CAAC,CAAC;SACJ,CAAC,CAAC;QAEH,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE;YAC9B,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,KAAK;YACjB,aAAa,EAAE,KAAK;SACrB,CAAC,CAAC;KACJ;IACc,oCAAiB,GAAhC,UAAiC,QAAa;QAC5C,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;YACxB,OAAO;SACR;QAED,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3D,IAAI,IAAI,GAAgB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAgB,CAAC;YAC9D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;gBAC7D,OAAO;aACR;YAED,kBAAkB,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;SAChD;KACF;IAEc,wCAAqB,GAApC,UAAqC,OAAoB;;QAEvD,IAAI,kBAAkB,CAAC,0BAA0B,CAAC,OAAO,CAAC,EAAE;YAC1D,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;SAC/B;;;QAID,IAAI,wBAAwB,GAExB,kBAAkB,CAAC,iCAAiC,CAAC,OAAO,CAAC,CAAC;QAClE,IAAI,wBAAwB,CAAC,MAAM,GAAG,CAAC,EAAE;YACvC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,wBAAwB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAChE,IAAI,IAAI,GAAgB,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAgB,CAAC;gBACxE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;aAC5B;SACF;KACF;IAEc,6CAA0B,GAAzC,UAA0C,OAAoB;QAC5D,IAAI,UAAU,GAAa,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACxD,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClD,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACjD,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;KACd;IACc,oDAAiC,GAAhD,UACE,OAAoB;QAEpB,OAAO,OAAO,CAAC,sBAAsB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;KACzD;IACH,yBAAC;CAAA;;AC5ED;;;AAGA;IAAA;KAaC;IAVe,mBAAG,GAAjB,UAAkB,OAAY;QAC5B,OAAO,CAAC,MAAM,GAAG,eAAe,CAAC,KAAK,EAAE,CAAA;QACxC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;KAC1C;IACa,sBAAM,GAApB,UAAqB,OAAY;QAC/B,IAAI,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE;YACjD,OAAO,IAAI,CAAA;SACZ;QACD,OAAO,KAAK,CAAA;KACb;IAXa,qBAAK,GAAQ,EAAE,CAAA;IACd,qBAAK,GAAW,CAAC,CAAA;IAWlC,sBAAC;CAAA;;ACZD;;;AAGA;IACE,cAAY,OAA0B;QACpC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC1B,kBAAkB,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,IAAI,EAAE,CAAC;KACb;IACa,gBAAW,GAAzB,UAA0B,OAA0B;QAClD,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QACnC,QAAQ,CAAC,eAAe,GAAG,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC;QACnD,QAAQ,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;KACtC;;;;IAKa,SAAI,GAAlB;QACE,IAAI,qBAAqB,GAErB,QAAQ,CAAC,sBAAsB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrD,IAAI,IAAI,GAAgB,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAgB,CAAC;YACrE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;SAC5B;KACF;;;;;;;;IAQa,oBAAe,GAA7B,UAA8B,IAAiB;QAC7C,IAAI,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAChC,OAAO;SACR;QACD,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,UAAU,GAAiB,IAAI,CAAC,UAAU,CAAC;QAC/C,IAAI,OAAO,GAAS,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QACtE,IAAI,eAAe,GAAQ,EAAE,CAAC;QAC9B,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClD,IAAI,aAAa,GAAW,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC/C,IAAI,cAAc,GAAW,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACjD,IACE,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC;gBAC7C,aAAa,KAAK,QAAQ,CAAC,eAC7B,EAAE;gBACA,eAAe,CACb,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,GAAG,GAAG,EAAE,EAAE,CAAC,CAClD,GAAG,cAAc,CAAC;aACpB;SACF;QACD,IAAI,OAAO,CAAC,KAAK,KAAK,MAAM,EAAE;YAC5B,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;SACpC;aAAM;YACL,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,EAAE,UAAC,CAAQ;gBAC5C,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;aACpC,CAAC,CAAC;SACJ;KACF;IACH,WAAC;CAAA,IAAA;AACD;IAAA;KAGC;IAAD,wBAAC;CAAA;;;;"}